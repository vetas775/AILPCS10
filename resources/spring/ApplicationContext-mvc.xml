<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns="http://www.springframework.org/schema/beans" 
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context.xsd 
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/mvc 
	http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
	http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-2.5.xsd"
    >
    
    <!--start:使用Jackson 1.x的配置，需要导入的jar包：jackson-core-lpgl-xxx.jar、jackson-mapper-lgpl-xxx.jar -->
    <!-- 
    <bean class ="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" >
        <property name="messageConverters">
            <list>
                
                <bean class="org.springframework.http.converter.StringHttpMessageConverter"> //设置返回字符串编码,避免使用@ResponseBody后返回乱码 
                    <property name = "supportedMediaTypes">
                        <list>
                            <value>text/html;charset=UTF-8</value>
                        </list>
                    </property>
                </bean>
                
                <bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter" > json转换器
                    <property name="supportedMediaTypes">
                        <list>
                            <value>text/html;charset=UTF-8</value>
                        </list>
                    </property>
                </bean>
            </list>
        </property>
    </bean>
     -->
    <!--end:使用Jackson 1.x的配置，需要导入的jar包：jackson-core-lpgl-xxx.jar、jackson-mapper-lgpl-xxx.jar -->
    
    
    <!--start:使用Jackson 2.x的配置，需要导入的jar包：jackson-core-xxx.jar、jackson-annotations-xxx.jar、jackson-databind-xxx.jar-->
    <!--通过处理器映射DefaultAnnotationHandlerMapping来开启支持@Controller注解-->
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping" />
    <!--通过处理器适配器AnnotationMethodHandlerAdapter来开启支持@RequestMapping注解-->
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
            <list>
                <!-- 设置返回字符串编码 -->
                <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                    <property name = "supportedMediaTypes">
                        <list>
                            <value>text/html;charset=UTF-8</value>
                            <value>application/json;charset=UTF-8</value>
                        </list>
                    </property>
                </bean>
                <!-- json转换器 -->
                <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                    <property name="supportedMediaTypes">
                        <list>
                            <value>text/html;charset=UTF-8</value>
                            <value>application/json;charset=UTF-8</value>
                        </list>
                    </property>
                    <property name="objectMapper">  
                        <bean class="com.fasterxml.jackson.databind.ObjectMapper"> 
                            <!--MichaelTsui: 返回的json字段存在null的情况我们需要对其进行处理,objectMapper提供了默认的几种处理方式配置如下:
                                  ALWAYS,  NON_NULL(将字段为null的清理掉不在结果Json中显示出来), NON_DEFAULT, NON_EMPTY
                            <property name="serializationInclusion">  
                                <value type="com.fasterxml.jackson.annotation.JsonInclude.Include">NON_NULL</value>  
                            </property> 
                            --> 
                            
                            <!--MichaelTsui:  有些特殊情况,我们不能将null字段直接去除,而是需要给予一个默认的值,则可以设置如下配置 , 其中
                                MyCustomJacksonGomeSearchJsonSerializer是我们自定义的null处理类, 如下: -->
                            <!--Michaeltsui17/07/21:MyCustomJacksonGomeSearchJsonSerializer把值为null的字段序列化时处理为空串("")-->                                                              
                            <property name="serializerProvider">  
                                <bean class="com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.Impl">  
                                    <property name="nullValueSerializer">  
                                        <bean class="com.ailpcs.core.MyCustomJacksonGomeSearchJsonSerializer"></bean>  
                                    </property>  
                                </bean>  
                            </property>   
                        </bean>  
                    </property>  
                </bean>
            </list>
        </property>
    </bean>
    <!--end:使用Jackson 2.x的配置，需要导入的jar包：jackson-core-xxx.jar、jackson-annotations-xxx.jar、jackson-databind-xxx.jar-->
    
    <!-- ②：启动Spring MVC的注解功能，完成请求和注解POJO的映射 
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"></bean>
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
            <list>
                <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" />
            </list>
         </property>
    </bean>
    -->    
    <!-- mvc:annotation-driven使用注解功能   
    <mvc:annotation-driven>    
        <mvc:message-converters register-defaults="true">    
            <bean    
                class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">    
                <property name="supportedMediaTypes">    
                    <list>    
                        <value>application/json;charset=UTF-8</value>    
                        <value>text/html;charset=UTF-8</value>    
                    </list>    
                </property>    
            </bean>    
        </mvc:message-converters>    
    </mvc:annotation-driven>    
    -->  
    
    
	
	<mvc:annotation-driven/>	
	<mvc:default-servlet-handler/>
	
	<!-- 配置扫描@Controller类型的组件 -->
	<context:component-scan base-package="com.ailpcs.controller" />

	<!-- 对静态资源文件的访问  restful-->
	<!-- spring 4.3.7 可能会误报红叉，但不影响正常运行 -->   
	<mvc:resources mapping="/admin/**" location="/,/admin/" />
	<mvc:resources mapping="/static/**" location="/,/static/" />
	<mvc:resources mapping="/plugins/**" location="/,/plugins/" />
	<mvc:resources mapping="/uploadFiles/**" location="/,/uploadFiles/" /> 

	<!-- 这是一个我们自定义的Spring MVC拦截器, 里面重写了preHandle方法来对本系统的所有访问进行拦截后进行业务权限检查  -->  
  	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**/**"/>
			<bean class="com.ailpcs.core.MyLoginHandlerInterceptor"/>
		</mvc:interceptor>
	</mvc:interceptors>
	 
	<!-- 配置SpringMVC的视图解析器 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/jsp/"/>
		<property name="suffix" value=".jsp"/>
	</bean>
	
	<!-- 自定义实现的Spring HandlerExceptionResolver, 用于处理异常和log -->
	<bean id="exceptionResolver" class="com.ailpcs.core.MyExceptionResolver"></bean>
	
	<!-- 上传拦截，如最大上传值及最小上传值 -->
	  <bean id="multipartResolver"   class="org.springframework.web.multipart.commons.CommonsMultipartResolver" >   
		  <property name="maxUploadSize">    
	          <value>104857600</value>    
	       </property>   
	        <property name="maxInMemorySize">    
	            <value>4096</value>    
	        </property>   
	         <property name="defaultEncoding">    
	            <value>utf-8</value>    
	        </property> 
    </bean>  
	
</beans>
